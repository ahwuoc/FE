"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerDescription,
  DrawerFooter,
} from "@/components/ui/drawer";
import { useToast } from "@/hooks/use-toast";
import apiAuth, { TUser } from "@/app/fetch/fetch.auth";
import { Trash2 } from "lucide-react";

interface UserDrawerProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
  setUsers: React.Dispatch<React.SetStateAction<TUser[]>>;
  selectedUser: TUser | null;
  setSelectedUser: React.Dispatch<React.SetStateAction<TUser | null>>;
  formData: {
    name: string;
    email: string;
    password: string;
    role: "user" | "admin";
  };
  setFormData: React.Dispatch<
    React.SetStateAction<{
      name: string;
      email: string;
      password: string;
      role: "user" | "admin";
    }>
  >;
}

export default function UserDrawer({
  isOpen,
  setIsOpen,
  setUsers,
  selectedUser,
  setSelectedUser,
  formData,
  setFormData,
}: UserDrawerProps) {
  const { toast } = useToast();

  const handleSubmit = async () => {
    try {
      if (selectedUser?._id) {
        const data = {
          name: formData.name,
          email: formData.email,
          role: formData.role,
        }
        const res = await apiAuth.updateUser(selectedUser._id, data);
        if (res.status === 200) {
          setUsers((prev) =>
            prev.map((u) => (u._id === selectedUser._id ? res.payload.user : u)),
          );
          toast({
            title: "Th√†nh c√¥ng",
            description: "S·ª≠a user m∆∞·ª£t nh∆∞ b∆°! üòé",
          });
        } else {
          throw new Error("S·ª≠a user th·∫•t b·∫°i");
        }
      } else {
        const res = await apiAuth.createUser(formData);
        if (res.status === 201) {
          setUsers((prev) => [...prev, res.payload.user]);
          toast({
            title: "Th√†nh c√¥ng",
            description: "Th√™m user m·ªõi nhanh h∆°n √°nh s√°ng! üöÄ",
          });
        } else {
          throw new Error("Th√™m user th·∫•t b·∫°i");
        }
      }
      setIsOpen(false);
      setFormData({ name: "", email: "", password: "", role: "user" });
      setSelectedUser(null);
    } catch (err: any) {
      toast({
        title: "L·ªói",
        description: err.response?.data?.error || "Kh√¥ng th·ªÉ x·ª≠ l√Ω user!",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async () => {
    if (!selectedUser?._id) return;
    try {
      const res = await apiAuth.deleteUser(selectedUser._id);
      if (res.status === 200) {
        setUsers((prev) => prev.filter((u) => u._id !== selectedUser._id));
        setIsOpen(false);
        setSelectedUser(null);
        toast({
          title: "Th√†nh c√¥ng",
          description: "X√≥a user nhanh nh∆∞ m·ªôt c∆°n gi√≥! üå™Ô∏è",
        });
      } else {
        throw new Error("X√≥a user th·∫•t b·∫°i");
      }
    } catch (err: any) {
      toast({
        title: "L·ªói",
        description: err.response?.data?.error || "Kh√¥ng th·ªÉ x√≥a user!",
        variant: "destructive",
      });
    }
  };

  return (
    <Drawer open={isOpen} onOpenChange={setIsOpen}>
      <DrawerContent className="w-full sm:w-96">
        <DrawerHeader>
          <DrawerTitle>
            {selectedUser?._id ? "S·ª≠a ng∆∞·ªùi d√πng" : "Th√™m ng∆∞·ªùi d√πng m·ªõi"}
          </DrawerTitle>
          <DrawerDescription>
            {selectedUser?._id
              ? "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng."
              : "Nh·∫≠p th√¥ng tin ƒë·ªÉ t·∫°o ng∆∞·ªùi d√πng m·ªõi."}
          </DrawerDescription>
        </DrawerHeader>
        <div className="grid gap-4 p-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right">
              H·ªç t√™n
            </Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="email" className="text-right">
              Email
            </Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) =>
                setFormData({ ...formData, email: e.target.value })
              }
              className="col-span-3"
            />
          </div>
          {!selectedUser?._id && (
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="password" className="text-right">
                M·∫≠t kh·∫©u
              </Label>
              <Input
                id="password"
                type="password"
                value={formData.password}
                onChange={(e) =>
                  setFormData({ ...formData, password: e.target.value })
                }
                className="col-span-3"
              />
            </div>
          )}
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="role" className="text-right">
              Vai tr√≤
            </Label>
            <select
              id="role"
              value={formData.role}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  role: e.target.value as "user" | "admin",
                })
              }
              className="col-span-3 border rounded-md p-2"
            >
              <option value="user">Ng∆∞·ªùi d√πng</option>
              <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
            </select>
          </div>
        </div>
        <DrawerFooter className="flex justify-between">
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => setIsOpen(false)}>
              H·ªßy
            </Button>
            <Button onClick={handleSubmit}>
              {selectedUser?._id ? "L∆∞u" : "Th√™m"}
            </Button>
          </div>
          {selectedUser?._id && (
            <Button variant="destructive" onClick={handleDelete}>
              <Trash2 className="w-4 h-4 mr-1" />
              X√≥a
            </Button>
          )}
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  );
}
