// AdminProjectCarbonPage.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table"; // S·ª≠ d·ª•ng components t·ª´ shadcn/ui
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card"; // S·ª≠ d·ª•ng components t·ª´ shadcn/ui
import { Button } from "@/components/ui/button"; // S·ª≠ d·ª•ng components t·ª´ shadcn/ui
import { Plus, Pencil, Trash2 } from "lucide-react"; // S·ª≠ d·ª•ng icons t·ª´ lucide-react
import { useToast } from "@/hooks/use-toast"; // S·ª≠ d·ª•ng hook toast c·ªßa b·∫°n
import { ProjectCarbonApiResponse as IProjectCarbon } from "@/app/fetch/fetch.project-carbon";

import { apiProjectCarbon, } from "@/app/fetch/fetch.project-carbon"; // <-- C·∫ßn ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i v√† c√≥ c√°c ph∆∞∆°ng th·ª©c getAll, delete
export default function AdminProjectCarbonPage() {
    const router = useRouter();
    // C·∫≠p nh·∫≠t state ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch d·ª± √°n Carbon
    const [projects, setProjects] = useState<IProjectCarbon[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { toast } = useToast();

    // H√†m l·∫•y danh s√°ch d·ª± √°n
    const fetchProjects = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch d·ª± √°n
            const response = await apiProjectCarbon.getAll();
            // Gi·∫£ ƒë·ªãnh c·∫•u tr√∫c response t∆∞∆°ng t·ª± apiNews: { data: { data: [...] } }
            if (response?.data && Array.isArray(response.data)) {
                setProjects(response.data);
            } else {
                // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
                console.error("API response did not contain data.data array:", response);
                setProjects([]); // ƒê·∫∑t danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá
                // throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch d·ª± √°n Carbon"); // C√≥ th·ªÉ n√©m l·ªói ho·∫∑c ch·ªâ log
            }
        } catch (err: any) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu d·ª± √°n Carbon:", err);
            setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ª± √°n Carbon. Vui l√≤ng th·ª≠ l·∫°i.");
            setProjects([]); // ƒê·∫∑t danh s√°ch r·ªóng khi c√≥ l·ªói
        } finally {
            setLoading(false);
        }
    }, []); // dependencies array tr·ªëng v√¨ kh√¥ng ph·ª• thu·ªôc v√†o bi·∫øn n√†o b√™n ngo√†i c·∫ßn theo d√µi

    // Effect ƒë·ªÉ g·ªçi h√†m fetchProjects khi component mount
    useEffect(() => {
        fetchProjects();
    }, [fetchProjects]); // Th√™m fetchProjects v√†o dependencies array theo khuy·∫øn c√°o c·ªßa React Hook

    // X·ª≠ l√Ω khi click n√∫t Th√™m d·ª± √°n
    const handleAddProject = () => {
        router.push("/quan-ly/admin/projects/create"); // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n
    };

    // X·ª≠ l√Ω khi click n√∫t S·ª≠a d·ª± √°n
    const handleEditProject = (id: string) => {
        router.push(`/quan-ly/admin/projects/edit/${id}`); // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n
    };

    // X·ª≠ l√Ω khi click n√∫t X√≥a d·ª± √°n
    const handleDeleteProject = async (id: string) => {
        if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ª± √°n n√†y kh√¥ng?")) {
            return; // H·ªèi x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        }
        try {
            // G·ªçi API ƒë·ªÉ x√≥a d·ª± √°n
            await apiProjectCarbon.delete(id);
            // C·∫≠p nh·∫≠t state ƒë·ªÉ lo·∫°i b·ªè d·ª± √°n ƒë√£ x√≥a
            setProjects((prev) => prev.filter((project) => project._id !== id));
            toast({
                title: "Th√†nh c√¥ng",
                description: "X√≥a d·ª± √°n th√†nh c√¥ng! üóëÔ∏è",
            });
        } catch (err: any) {
            console.error("L·ªói khi x√≥a d·ª± √°n:", err);
            toast({
                title: "L·ªói",
                description: "Kh√¥ng th·ªÉ x√≥a d·ª± √°n! üòµ Vui l√≤ng th·ª≠ l·∫°i.",
                variant: "destructive",
            });
        }
    };

    // H√†m ƒë·ªãnh d·∫°ng ng√†y th√°ng (gi·ªØ nguy√™n)
    const formatDate = (dateString: Date | string) => {
        if (!dateString) return "N/A";
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return "Ng√†y kh√¥ng h·ª£p l·ªá"; // X·ª≠ l√Ω ng√†y kh√¥ng h·ª£p l·ªá
            }
            return date.toLocaleDateString("vi-VN", {
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
            });
        } catch (e) {
            console.error("L·ªói ƒë·ªãnh d·∫°ng ng√†y:", e);
            return "Ng√†y kh√¥ng h·ª£p l·ªá"; // X·ª≠ l√Ω l·ªói khi t·∫°o Date
        }
    };

    // Hi·ªÉn th·ªã khi ƒëang t·∫£i
    if (loading) {
        return (
            <div className="container mx-auto py-10 px-4 text-center">
                <p>ƒêang t·∫£i danh s√°ch d·ª± √°n...</p>
            </div>
        );
    }

    // Hi·ªÉn th·ªã khi c√≥ l·ªói
    if (error) {
        return (
            <div className="container mx-auto py-10 px-4 text-center">
                <p className="text-red-500">{error}</p>
                <Button onClick={fetchProjects} className="mt-4">
                    Th·ª≠ l·∫°i
                </Button>
            </div>
        );
    }

    // Hi·ªÉn th·ªã giao di·ªán danh s√°ch d·ª± √°n
    return (
        <div className="flex min-h-screen w-full">
            <div className="flex-1 p-4 md:p-8">
                <Card className="w-full">
                    <CardHeader>
                        <div className="flex justify-between items-center">
                            <div>
                                <CardTitle>Danh s√°ch d·ª± √°n Carbon</CardTitle>
                                <CardDescription>
                                    Qu·∫£n l√Ω th√¥ng tin c√°c d·ª± √°n Carbon tr√™n h·ªá th·ªëng
                                </CardDescription>
                            </div>
                            <Button onClick={handleAddProject}>
                                <Plus className="w-4 h-4 mr-2" />
                                Th√™m d·ª± √°n
                            </Button>
                        </div>
                    </CardHeader>
                    <CardContent>
                        {/* Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ª± √°n n√†o */}
                        {projects.length === 0 ? (
                            <div className="text-center py-8">
                                <p className="text-gray-500">Ch∆∞a c√≥ d·ª± √°n n√†o. Th√™m ngay!</p>
                                <Button className="mt-4" onClick={handleAddProject}>
                                    <Plus className="w-4 h-4 mr-2" />
                                    Th√™m d·ª± √°n
                                </Button>
                            </div>
                        ) : (
                            // Hi·ªÉn th·ªã b·∫£ng n·∫øu c√≥ d·ª± √°n
                            <div className="overflow-x-auto">
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            {/* C·∫≠p nh·∫≠t c√°c c·ªôt c·ªßa b·∫£ng */}
                                            <TableHead>T√™n d·ª± √°n</TableHead>
                                            <TableHead>Lo·∫°i d·ª± √°n</TableHead>
                                            <TableHead>T·ªï ch·ª©c</TableHead>
                                            <TableHead>ƒêi·ªán tho·∫°i</TableHead>
                                            <TableHead>Email</TableHead>
                                            <TableHead>Ng√†y t·∫°o</TableHead>
                                            <TableHead>H√†nh ƒë·ªông</TableHead>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {/* Mapping qua danh s√°ch d·ª± √°n ƒë·ªÉ t·∫°o c√°c h√†ng */}
                                        {projects.map((project) => (
                                            <TableRow
                                                key={project._id}
                                                className="hover:bg-gray-50 transition-colors"
                                            >
                                                {/* Hi·ªÉn th·ªã d·ªØ li·ªáu cho t·ª´ng c·ªôt */}
                                                <TableCell
                                                    className="font-medium max-w-xs truncate"
                                                    title={project.name}
                                                >
                                                    {project.name || "N/A"}
                                                </TableCell>
                                                <TableCell>
                                                    {/* Hi·ªÉn th·ªã lo·∫°i d·ª± √°n v·ªõi label ti·∫øng Vi·ªát */}
                                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${project.projectType === "forest" ? "bg-green-100 text-green-800" :
                                                        project.projectType === "rice" ? "bg-blue-100 text-blue-800" :
                                                            project.projectType === "biochar" ? "bg-yellow-100 text-yellow-800" :
                                                                "bg-gray-100 text-gray-800"
                                                        }`}>
                                                        {project.projectType === "forest"
                                                            ? "L√¢m nghi·ªáp"
                                                            : project.projectType === "rice"
                                                                ? "L√∫a"
                                                                : project.projectType === "biochar"
                                                                    ? "Biochar"
                                                                    : "Kh√¥ng x√°c ƒë·ªãnh"}
                                                    </span>
                                                </TableCell>
                                                <TableCell>{project.organization || "N/A"}</TableCell>
                                                <TableCell>{project.phone || "N/A"}</TableCell>
                                                <TableCell
                                                    className="max-w-xs truncate"
                                                    title={project.email}
                                                >
                                                    {project.email || "N/A"}
                                                </TableCell>
                                                <TableCell>
                                                    {project.createdAt
                                                        ? formatDate(project.createdAt)
                                                        : "N/A"}
                                                </TableCell>
                                                {/* C·ªôt h√†nh ƒë·ªông */}
                                                <TableCell>
                                                    <div className="flex gap-2">
                                                        <Button
                                                            variant="outline"
                                                            size="sm"
                                                            className="hover:bg-blue-50 hover:text-blue-600 transition-colors"
                                                            onClick={() => handleEditProject(project._id)}
                                                            title="S·ª≠a d·ª± √°n"
                                                        >
                                                            <Pencil className="w-4 h-4 mr-1" />
                                                            S·ª≠a
                                                        </Button>
                                                        <Button
                                                            variant="outline"
                                                            size="sm"
                                                            className="hover:bg-red-50 hover:text-red-600 transition-colors"
                                                            onClick={() => handleDeleteProject(project._id)}
                                                            title="X√≥a d·ª± √°n"
                                                        >
                                                            <Trash2 className="w-4 h-4 mr-1" />
                                                            X√≥a
                                                        </Button>
                                                    </div>
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
