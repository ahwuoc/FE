"use client";

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { apiAffiliates } from "@/app/fetch/fetch.affiliate";
import { useAuth } from "../../../../context/auth-context";
interface FormData {
  fullName: string;
  email: string;
  phone: string;
  company: string;
  reason: string;
  address: string;
  website: string;
  socialMedia: string;
  experience: string;
}

export default function AffiliateRegisterForm() {
  const { toast } = useToast();

  const [formData, setFormData] = useState<FormData>({
    fullName: "",
    email: "",
    phone: "",
    company: "",
    reason: "",
    address: "",
    website: "",
    socialMedia: "",
    experience: "",
  });

  const { user } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const showError = (message: string) =>
    toast({
      title: "L·ªói üò¢",
      description: message,
      variant: "destructive",
    });

  const validateForm = () => {
    const errors: { [key: string]: string } = {};

    if (!formData.fullName || formData.fullName.length < 2)
      errors.fullName = "H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±.";

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email))
      errors.email = "Email kh√¥ng h·ª£p l·ªá.";

    if (!/^\+?[0-9]{9,15}$/.test(formData.phone)) {
      errors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.";
    }
    if (!formData.reason || formData.reason.length < 10)
      errors.reason = "L√Ω do tham gia ph·∫£i d√†i h∆°n 10 k√Ω t·ª±.";

    if (!formData.address || formData.address.length < 5)
      errors.address = "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±.";

    if (Object.keys(errors).length > 0) {
      showError(Object.values(errors)[0]); // Hi·ªÉn th·ªã l·ªói ƒë·∫ßu ti√™n
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setIsSubmitting(true);
    try {


      const userId = user?.userId;
      const payload = { ...formData, userId };
      const response = await apiAffiliates.create(payload);

      if (response?.data) {
        toast({
          title: "Th√†nh c√¥ng üéâ",
          description: "ƒêƒÉng k√Ω affiliate th√†nh c√¥ng. Ki·∫øm ti·ªÅn th√¥i n√†o! üí∞",
        });
        window.location.reload();
      }
    } catch (error) {
      showError("ƒêƒÉng k√Ω th·∫•t b·∫°i. Th·ª≠ l·∫°i sau nha!");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="py-6 max-w-5xl mx-auto">
      <h1 className="text-3xl font-bold text-center mb-6">ƒêƒÉng k√Ω Affiliate</h1>
      <p className="text-gray-600 text-center mb-8">
        ƒêi·ªÅn th√¥ng tin ƒë·ªÉ tham gia ch∆∞∆°ng tr√¨nh ti·∫øp th·ªã li√™n k·∫øt v√† b·∫Øt ƒë·∫ßu
        ki·∫øm ti·ªÅn! üöÄ
      </p>

      <div className="flex flex-col md:flex-row gap-8">
        {/* --- Commission Table --- */}
        <div className="md:w-1/2">
          <h2 className="text-2xl font-semibold mb-4">C∆° c·∫•u hoa h·ªìng</h2>
          <div className="bg-gray-50 p-4 rounded-lg shadow-sm">
            <table className="w-full text-sm">
              <thead className="bg-gray-200">
                <tr>
                  <th className="p-2">S·∫£n ph·∫©m</th>
                  <th className="p-2">C∆° b·∫£n</th>
                  <th className="p-2">VIP</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="p-2">Carbon To√†n Th∆∞ 4.0</td>
                  <td className="p-2">20%</td>
                  <td className="p-2">30%</td>
                </tr>
                <tr>
                  <td className="p-2">Kh√≥a h·ªçc qu·ªëc t·∫ø</td>
                  <td className="p-2">10%</td>
                  <td className="p-2">15%</td>
                </tr>
                <tr>
                  <td className="p-2">T√≠n ch·ªâ carbon</td>
                  <td className="p-2">5%</td>
                  <td className="p-2">10%</td>
                </tr>
                <tr>
                  <td className="p-2">T∆∞ v·∫•n doanh nghi·ªáp</td>
                  <td className="p-2">5%</td>
                  <td className="p-2">10%</td>
                </tr>
              </tbody>
            </table>
            <ul className="text-sm mt-4 text-gray-600 list-disc pl-5">
              <li>Hoa h·ªìng t√≠nh tr√™n doanh thu b·∫°n mang v·ªÅ.</li>
              <li>
                ƒê·∫°t VIP n·∫øu ƒë·∫°t 50 tri·ªáu doanh thu ho·∫∑c gi·ªõi thi·ªáu 20 kh√°ch h√†ng
                trong 3 th√°ng.
              </li>
              <li>Nh·∫≠n t√†i li·ªáu ti·∫øp th·ªã mi·ªÖn ph√≠ ngay sau khi ƒëƒÉng k√Ω.</li>
            </ul>
          </div>
        </div>

        {/* --- Form Section --- */}
        <div className="md:w-1/2">
          <form onSubmit={handleSubmit} className="space-y-4">
            <InputBlock
              label="H·ªç v√† t√™n"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              required
            />
            <InputBlock
              label="Email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              type="email"
              required
            />
            <div className="grid grid-cols-2 gap-4">
              <InputBlock
                label="S·ªë ƒëi·ªán tho·∫°i"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                required
              />
              <InputBlock
                label="C√¥ng ty"
                name="company"
                value={formData.company}
                onChange={handleChange}
              />
            </div>
            <InputBlock
              label="ƒê·ªãa ch·ªâ"
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
            />
            <div className="grid grid-cols-2 gap-4">
              <InputBlock
                label="Website"
                name="website"
                value={formData.website}
                onChange={handleChange}
              />
              <InputBlock
                label="M·∫°ng x√£ h·ªôi"
                name="socialMedia"
                value={formData.socialMedia}
                onChange={handleChange}
              />
            </div>
            <InputBlock
              label="Kinh nghi·ªám li√™n quan"
              name="experience"
              value={formData.experience}
              onChange={handleChange}
            />
            <InputBlock
              label="L√Ω do tham gia"
              name="reason"
              value={formData.reason}
              onChange={handleChange}
              required
            />

            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i ƒëƒÉng k√Ω"}
            </Button>
          </form>
        </div>
      </div>
    </div>
  );
}

// üîß Component InputBlock: gi·∫£m l·∫∑p, d·ªÖ maintain
function InputBlock({
  label,
  name,
  value,
  onChange,
  required = false,
  type = "text",
}: {
  label: string;
  name: keyof FormData;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  required?: boolean;
  type?: string;
}) {
  return (
    <div>
      <label htmlFor={name} className="block text-sm font-medium text-gray-700">
        {label}
      </label>
      <Input
        id={name}
        name={name}
        type={type}
        value={value}
        placeholder={label}
        onChange={onChange}
        required={required}
      />
    </div>
  );
}
