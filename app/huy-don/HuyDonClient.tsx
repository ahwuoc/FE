'use client';
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { AlertCircle, CheckCircle, ArrowLeft, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiOrders } from "../fetch/fetch.order";

export default function HuyDonClient() {
    const searchParams = useSearchParams();
    const orderCode = searchParams.get("orderCode");
    const { toast } = useToast();
    const [isLoading, setIsLoading] = useState(true);
    const [isCancelled, setIsCancelled] = useState(false);

    useEffect(() => {
        const cancelOrder = async () => {
            if (!orderCode) {
                setIsLoading(false);
                toast({
                    title: "L·ªói",
                    description: "M√£ ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!",
                    variant: "destructive",
                });
                return;
            }

            try {
                const response = await apiOrders.cancelOrder(orderCode);
                if (response.status === 200 || response.status === 201) {
                    setIsCancelled(true);
                    toast({
                        title: "Th√†nh c√¥ng",
                        description: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy, nhanh nh∆∞ m·ªôt c∆°n gi√≥! üå™Ô∏è",
                    });
                } else {
                    throw new Error("H·ªßy ƒë∆°n th·∫•t b·∫°i");
                }
            } catch (error) {
                console.error("L·ªói khi h·ªßy ƒë∆°n:", error);
                toast({
                    title: "L·ªói",
                    description: "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£!",
                    variant: "destructive",
                });
            } finally {
                setIsLoading(false);
            }
        };

        cancelOrder();
    }, [orderCode, toast]);

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gray-50 py-12 flex items-center justify-center">
                <Loader2 className="h-8 w-8 animate-spin text-red-600" />
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 py-12">
            <div className="container mx-auto px-4">
                <Card className="max-w-3xl mx-auto">
                    <CardHeader className="text-center bg-red-50">
                        <div className="mx-auto mb-4 bg-red-100 w-16 h-16 rounded-full flex items-center justify-center">
                            {isCancelled ? (
                                <CheckCircle className="h-10 w-10 text-red-600" />
                            ) : (
                                <AlertCircle className="h-10 w-10 text-red-600" />
                            )}
                        </div>
                        <CardTitle className="text-2xl text-red-700">
                            {isCancelled ? "H·ªßy ƒë∆°n th√†nh c√¥ng!" : "H·ªßy ƒë∆°n th·∫•t b·∫°i!"}
                        </CardTitle>
                        <CardDescription>
                            {isCancelled
                                ? "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ bay m·∫•t! üòé"
                                : "√îi, c√≥ g√¨ ƒë√≥ sai sai r·ªìi! üòÖ"}
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="pt-6 text-center">
                        <p className="text-lg text-gray-700 mb-4">
                            {isCancelled
                                ? `ƒê∆°n h√†ng #${orderCode} ƒë√£ ƒë∆∞·ª£c h·ªßy, nhanh h∆°n c·∫£ t·ªëc ƒë·ªô √°nh s√°ng! üöÄ B·∫°n c√≥ mu·ªën th·ª≠ ƒë·∫∑t l·∫°i kh√¥ng?`
                                : `H·ªßy ƒë∆°n #${orderCode} ch∆∞a th√†nh c√¥ng, ch·∫≠m h∆°n c·∫£ r√πa b√≤! üê¢ Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.`}
                        </p>
                        <p className="text-sm text-gray-500 mb-6">
                            C·∫ßn gi√∫p ƒë·ª° ngay? G·ªçi hotline:{" "}
                            <span className="font-medium">092.3370.804</span>, team m√¨nh lu√¥n
                            s·∫µn s√†ng 24/7!
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <Link href="/" className="w-full sm:w-1/2">
                                <Button
                                    variant="outline"
                                    className="w-full transition-all duration-300 transform hover:scale-[1.02] hover:bg-gray-100"
                                >
                                    <ArrowLeft className="mr-2 h-4 w-4" />
                                    V·ªÅ trang ch·ªß
                                </Button>
                            </Link>
                            <Link
                                href={isCancelled ? "/san-pham" : "/thanh-toan"}
                                className="w-full sm:w-1/2"
                            >
                                <Button className="w-full bg-red-600 hover:bg-red-700 transition-all duration-300 transform hover:scale-[1.02]">
                                    {isCancelled ? "Kh√°m ph√° s·∫£n ph·∫©m" : "Th·ª≠ l·∫°i"}
                                </Button>
                            </Link>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
